import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import deezer

# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞
API_TOKEN = '–í–ê–®_–¢–û–ö–ï–ù'

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Deezer
deezer_client = deezer.Client()

# –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
user_playlists = {}
user_history = {}

OWNER_ID = "–í–ê–®_TELEGRAM_ID"  # –í–∞—à Telegram ID –¥–ª—è –∞–¥–º–∏–Ω-—Ñ—É–Ω–∫—Ü–∏–π

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_playlists:
        user_playlists[user_id] = []
    if user_id not in user_history:
        user_history[user_id] = []

    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –µ–≥–æ. –ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è –ø–æ–º–æ—â–∏.\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞–º–∏ —Å –¥—Ä—É–∑—å—è–º–∏! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /share –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–≤–æ–π –ø–ª–µ–π–ª–∏—Å—Ç."
    )

# –ö–æ–º–∞–Ω–¥–∞ /help
@dp.message_handler(commands=['help'])
async def help_command(message: types.Message):
    await message.reply(
        "üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "/playlist - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à –ø–ª–µ–π–ª–∏—Å—Ç\n"
        "/share - –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –ø–ª–µ–π–ª–∏—Å—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "/stats - –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞)\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞!"
    )

# –ö–æ–º–∞–Ω–¥–∞ /playlist
@dp.message_handler(commands=['playlist'])
async def playlist(message: types.Message):
    user_id = message.from_user.id
    playlist = user_playlists.get(user_id, [])
    if not playlist:
        await message.reply("–í–∞—à –ø–ª–µ–π–ª–∏—Å—Ç –ø—É—Å—Ç. –ù–∞–π–¥–∏—Ç–µ —Ç—Ä–µ–∫ –∏ –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ –ø–ª–µ–π–ª–∏—Å—Ç!")
        return

    response = "üé∂ –í–∞—à –ø–ª–µ–π–ª–∏—Å—Ç:\n"
    for i, track in enumerate(playlist, 1):
        response += f"{i}. {track['title']} ‚Äî {track['artist']} [–°–ª—É—à–∞—Ç—å]({track['link']})\n"
    await message.reply(response, parse_mode="Markdown")

# –ö–æ–º–∞–Ω–¥–∞ /share ‚Äî –¥–µ–ª–∏–º—Å—è —Å—Å—ã–ª–∫–æ–π –Ω–∞ –ø–ª–µ–π–ª–∏—Å—Ç
@dp.message_handler(commands=['share'])
async def share_playlist(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_playlists or not user_playlists[user_id]:
        await message.reply("–í–∞—à –ø–ª–µ–π–ª–∏—Å—Ç –ø—É—Å—Ç, –Ω–µ—á–µ–≥–æ –¥–µ–ª–∏—Ç—å—Å—è!")
        return

    share_link = f"playlist_{user_id}"
    keyboard = InlineKeyboardMarkup().add(InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç", callback_data=share_link))
    await message.reply("üîó –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π, —á—Ç–æ–±—ã –¥—Ä—É–≥–∏–µ –º–æ–≥–ª–∏ —É–≤–∏–¥–µ—Ç—å –≤–∞—à –ø–ª–µ–π–ª–∏—Å—Ç:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –ø–ª–µ–π–ª–∏—Å—Ç –¥—Ä—É–≥–∞
@dp.callback_query_handler(lambda call: call.data.startswith("playlist_"))
async def view_friend_playlist(call: types.CallbackQuery):
    user_id = int(call.data.split("_")[1])
    playlist = user_playlists.get(user_id, [])

    if not playlist:
        await call.message.reply("–ü–ª–µ–π–ª–∏—Å—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—É—Å—Ç.")
        return

    response = "üé∂ –ü–ª–µ–π–ª–∏—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
    for i, track in enumerate(playlist, 1):
        response += f"{i}. {track['title']} ‚Äî {track['artist']} [–°–ª—É—à–∞—Ç—å]({track['link']})\n"

    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤—Å–µ –≤ —Å–≤–æ–π –ø–ª–µ–π–ª–∏—Å—Ç", callback_data=f"add_friend_{user_id}"))
    await call.message.reply(response, reply_markup=keyboard, parse_mode="Markdown")

# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —á—É–∂–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞
@dp.callback_query_handler(lambda call: call.data.startswith("add_friend_"))
async def add_friend_playlist(call: types.CallbackQuery):
    friend_id = int(call.data.split("_")[2])
    user_id = call.from_user.id

    if friend_id not in user_playlists or not user_playlists[friend_id]:
        await call.message.reply("–£ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Ç—Ä–µ–∫–æ–≤ –≤ –ø–ª–µ–π–ª–∏—Å—Ç–µ.")
        return

    friend_playlist = user_playlists[friend_id]
    user_playlists[user_id].extend(friend_playlist)

    await call.message.reply("‚úÖ –í—Å–µ —Ç—Ä–µ–∫–∏ –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –¥—Ä—É–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –≤–∞—à –ø–ª–µ–π–ª–∏—Å—Ç!")

# –ü–æ–∏—Å–∫ —Ç—Ä–µ–∫–∞
@dp.message_handler()
async def search_track(message: types.Message):
    query = message.text
    user_id = message.from_user.id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –∏—Å—Ç–æ—Ä–∏—é
    user_history[user_id] = user_history.get(user_id, []) + [query]

    try:
        tracks = deezer_client.search(query)
        if not tracks:
            await message.reply("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.")
            return

        track = tracks[0]
        artist = track.artist.name

        # –ö–Ω–æ–ø–∫–∏
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("–ü–æ—Ö–æ–∂–∏–µ —Ç—Ä–µ–∫–∏", callback_data=f"similar_{track.id}"))
        keyboard.add(InlineKeyboardButton("–¢—Ä–µ–∫–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", callback_data=f"artist_{artist}"))
        keyboard.add(InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤ –ø–ª–µ–π–ª–∏—Å—Ç", callback_data=f"add_{track.id}"))
        keyboard.add(InlineKeyboardButton("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∂–∞–Ω—Ä—É", callback_data=f"genre_{track.genre_id}"))

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–µ–∫
        await message.reply(
            f"üîä –ù–∞–∑–≤–∞–Ω–∏–µ: {track.title}\nüé§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {artist}\nüîó [–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç—Ä–µ–∫]({track.link})",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    except Exception as e:
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        logging.error(e)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–∞ –≤ –ø–ª–µ–π–ª–∏—Å—Ç
@dp.callback_query_handler(lambda call: call.data.startswith("add_"))
async def add_to_playlist(call: types.CallbackQuery):
    track_id = call.data.split("_")[1]
    user_id = call.from_user.id

    try:
        track = deezer_client.get_track(track_id)
        user_playlists[user_id].append({
            "title": track.title,
            "artist": track.artist.name,
            "link": track.link
        })
        await call.message.reply(f"‚úÖ –¢—Ä–µ–∫ {track.title} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à –ø–ª–µ–π–ª–∏—Å—Ç!")
    except Exception as e:
        await call.message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫ –≤ –ø–ª–µ–π–ª–∏—Å—Ç.")
        logging.error(e)

# –ê–¥–º–∏–Ω-—Ñ—É–Ω–∫—Ü–∏–∏
@dp.message_handler(commands=['stats'])
async def stats(message: types.Message):
    if str(message.from_user.id) != OWNER_ID:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    user_count = len(user_playlists)
    await message.reply(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_count}")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
